---
const themes = [
  "dark",
  "light",
  "dracula",
  "retro",
  "cyberpunk",
  "valentine",
  "aqua",
];
---

<theme-select>
  <div class="dropdown dropdown-end">
    <div tabindex="0" role="button" class="btn m-1">
      Theme
      <svg
        width="12px"
        height="12px"
        class="inline-block h-2 w-2 fill-current opacity-60"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 2048 2048">
        <path d="M1799 349l242 241-1017 1017L7 590l242-241 775 775 775-775z"></path>
      </svg>
    </div>
    <ul
      tabindex="0"
      class="dropdown-content bg-base-300 rounded-box z-[1] w-52 p-2 shadow-2xl">
      {
        themes.map((theme) => (
          <li>
            <input
              type="radio"
              name="theme-dropdown"
              class="theme-controller btn btn-sm btn-block btn-ghost justify-start"
              aria-label={theme.charAt(0).toUpperCase() + theme.slice(1)}
              value={theme}
            />
          </li>
        ))
      }
    </ul>
  </div>
</theme-select>

<script>
  import { initializeStore, configStore } from "@/stores/configStore";
  initializeStore();

  // Update select value to match the store after initialization
  const input = document.querySelector("input");
  if (input) {
    input.checked = input.value === configStore.get().theme;
  }

  class ThemeSelect extends HTMLElement {
    constructor() {
      super();

      const inputs = this.querySelectorAll("input[name='theme-dropdown']");

      inputs.forEach((input) => {
        input.addEventListener("change", (e) => {
          const target = e.target as HTMLInputElement;
          configStore.set({ theme: target.value });
        });
      });
    }
  }
  customElements.define("theme-select", ThemeSelect);
</script>

<!-- Theme Init -->
<style is:inline data-astro-rerun>
  html {
    visibility: hidden;
  }
</style>

<script is:inline data-astro-rerun>
  const init = () => {
    let storedConfig = localStorage.getItem("config");
    const config = JSON.parse(storedConfig || "{}");

    if (!config.theme) {
      config.theme = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }

    document.querySelectorAll("theme-select").forEach((picker) => {
      const radio = picker.querySelector(
        `input[name='theme-dropdown'][value="${config.theme}"]`
      );
      if (radio) {
        radio.checked = true;
      }
    });

    document.documentElement.dataset.theme = config.theme;
    document.documentElement.style.visibility = "visible";
  };

  init();
  document.addEventListener("astro:after-swap", () => {
    init();
  });
</script>
